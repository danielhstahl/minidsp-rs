name: Release build

on:
  push:
    branches:
      - 'dev'

env:
  CARGO_TERM_COLOR: always
jobs:
  build_rpi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup cross environment
        run: docker build -t rpirust -f scripts/Dockerfile.rpi scripts/
      - name: Run build
        run: docker run --rm -v $(pwd):/src -w /src rpirust ./scripts/build-pi-armv6hf.sh deb -p minidsp
      - name: Copy debian package
        run: |
          cp -v target/arm-unknown-linux-gnueabihf/debian/minidsp* .
      - name: Upload debian package
        uses: actions/upload-artifact@v2.2.1
        with:
          name: arm-linux-gnueabihf-rpi-deb-artifact
          path: minidsp*.deb
          if-no-files-found: error
      - name: Create binary
        run: |
          mkdir archive
          cp target/arm-unknown-linux-gnueabihf/release/minidsp archive
          cd archive/
          tar -czf ../minidsp.arm-linux-gnueabihf-rpi.tar.gz *
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: arm-linux-gnueabihf-rpi-artifact
          path: minidsp.arm-linux-gnueabihf-rpi.tar.gz
          if-no-files-found: error
  
  build_all:
    strategy:
      fail-fast: true
      matrix:
        pair:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            bin: minidsp
            svc_bin: minidspd
            cross: false
            archive: tar.gz

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            bin: minidsp
            svc_bin: minidspd
            cross: true
            cross_image: local/aarch64-unknown-linux-gnu
            cross_dockerfile: Dockerfile.aarch64
            archive: tar.gz

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            bin: minidsp
            svc_bin: minidspd
            cross: false
            archive: tar.gz

          - target: x86_64-apple-darwin
            os: macOS-latest
            bin: minidsp
            svc_bin: minidspd
            cross: false
            archive: tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            bin: minidsp.exe
            svc_bin: minidspd.exe
            cross: false
            archive: zip

    runs-on: ${{ matrix.pair.os }}
    env:
      CARGO_DEB_VER: 2.3.0

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.pair.target }}
          override: true

      - name: Install native packages
        if: runner.os == 'Linux' && matrix.pair.cross == false
        run: sudo apt-get install libusb-1.0-0 libusb-1.0-0-dev

      - name: Build cross image
        if: runner.os == 'Linux' && matrix.pair.cross == true
        run: |
          docker build -t ${{ matrix.pair.cross_image }} -f scripts/${{ matrix.pair.cross_dockerfile }} scripts/

      # From https://github.com/NLnetLabs/krill/blob/master/.github/workflows/pkg.yml
      # Speed up cargo-deb installation by only re-downloading and re-building its
      # dependent crates if we change the version of cargo-deb that we are using.
      - name: Cache Cargo Deb binary
        if: runner.os == 'Linux'
        id: cache-cargo-deb
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/cargo-deb
          key: ${{ matrix.pair.target }}-cargo-deb-${{ env.CARGO_DEB_VER }}

      # Only install cargo-deb if not already fetched from the cache.
      - name: Install Cargo Deb
        if: runner.os == 'Linux' && steps.cache-cargo-deb.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-deb --version $CARGO_DEB_VER

      - uses: actions-rs/cargo@v1
        if: ${{ matrix.pair.target != 'x86_64-unknown-linux-musl' }}
        with:
          use-cross: ${{ matrix.pair.cross }} 
          command: build
          args: --bin minidsp --bin minidspd --release --target ${{ matrix.pair.target }}

      - uses: actions-rs/cargo@v1
        if: ${{ matrix.pair.target == 'x86_64-unknown-linux-musl' }}
        with:
          use-cross: ${{ matrix.pair.cross }} 
          command: build
          args: --no-default-features --features serde,strum,schemars,devices --bin minidsp --bin minidspd --release --target ${{ matrix.pair.target }}

      - name: Create debian package
        if: runner.os == 'Linux'
        run: |
          cargo deb --target ${{ matrix.pair.target }} -p minidsp --no-build --no-strip
          cp -v target/${{ matrix.pair.target }}/debian/${{ matrix.pair.bin }}* ${{ matrix.pair.bin }}_${{ matrix.pair.target }}.deb

      - name: Upload debian package
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ matrix.pair.target }}-deb
          path: minidsp*.deb
          if-no-files-found: error

      - name: Create binary
        if: matrix.pair.archive == 'tar.gz'
        run: |
          mkdir archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.bin }} archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.svc_bin }} archive
          cd archive/
          tar -czf ../minidsp.${{ matrix.pair.target }}.tar.gz *

      - name: Create binary
        if: matrix.pair.archive == 'zip'
        run: |
          mkdir archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.bin }} archive
          cp target/${{ matrix.pair.target }}/release/${{ matrix.pair.svc_bin }} archive
          cd archive/
          compress-archive -Path *.exe -DestinationPath ../minidsp.${{ matrix.pair.target }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ matrix.pair.target }}-artifact
          path: minidsp.${{ matrix.pair.target }}.${{ matrix.pair.archive }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build_all]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifacts
        run: |
          ls -R artifacts/**/*

      - name: Create release with artifacts
        run: |
          set -x
          assets=()
          for asset in ./artifacts/*/*.{tar.gz,zip,deb}; do
            assets+=("$asset")
          done
          TAG="${GITHUB_REF##*/}"
          gh release create "${assets[@]}" --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}