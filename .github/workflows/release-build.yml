name: Release build

on:
  push:
    branches:
      - 'dev'

env:
  CARGO_TERM_COLOR: always
jobs:

  build_all:
    strategy:
      fail-fast: false
      matrix:
        target: 
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          archive: tar.gz
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          archive: tar.gz
        - target: armv7-unknown-linux-gnueabihf
          os: ubuntu-latest
          archive: tar.gz
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-latest
          archive: tar.gz
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          archive: zip
        - target: x86_64-apple-darwin
          os: macOS-latest
          archive: tar.gz
    runs-on: ${{ matrix.target.os }}
    env:
      CARGO_DEB_VER: 2.3.0
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          curl -L https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-gnu.tar.gz -o cross-x86_64-unknown-linux-gnu.tar.gz
          tar -xvzf cross-x86_64-unknown-linux-gnu.tar.gz
          rustup update stable

      - name: Compile
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libusb-1.0-0 libusb-1.0-0-dev
          ./cross build --bin minidsp --bin minidspd --release --target ${{ matrix.target.target }}

      - name: Compile
        if: runner.os == 'Windows'
        run: |
          cargo build --bin minidsp --bin minidspd --release --target ${{ matrix.target.target }}

      - name: Compile
        if: runner.os == 'macOS'
        run: |
          rustup target add ${{ matrix.target.target }}
          cargo build --bin minidsp --bin minidspd --release --target ${{ matrix.target.target }}
  

      # From https://github.com/NLnetLabs/krill/blob/master/.github/workflows/pkg.yml
      # Speed up cargo-deb installation by only re-downloading and re-building its
      # dependent crates if we change the version of cargo-deb that we are using.
      - name: Cache Cargo Deb binary
        if: runner.os == 'Linux'
        id: cache-cargo-deb
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/cargo-deb
          key: ${{ matrix.target.target }}-cargo-deb-${{ env.CARGO_DEB_VER }}

      # Only install cargo-deb if not already fetched from the cache.
      - name: Install Cargo Deb
        if: runner.os == 'Linux' && steps.cache-cargo-deb.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-deb --version $CARGO_DEB_VER

      - name: Create debian package
        if: runner.os == 'Linux'
        run: |
          cargo deb --target ${{ matrix.target.target }} -p minidsp --no-build --no-strip
          cp -v target/${{ matrix.target.target }}/debian/${{ matrix.target.bin }}* .

      - name: Upload debian package
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ matrix.target.target }}-deb
          path: minidsp*.deb
          if-no-files-found: error

      - name: Create binary
        if: matrix.target.archive == 'tar.gz'
        run: |
          mkdir archive
          cp target/${{ matrix.target.target }}/release/minidsp archive
          cp target/${{ matrix.target.target }}/release/minidspd archive
          cd archive/
          tar -czf ../minidsp.${{ matrix.target.target }}.tar.gz *

      - name: Create binary
        if: matrix.target.archive == 'zip'
        run: |
          mkdir archive
          cp target/${{ matrix.target.target }}/release/minidsp.exe archive
          cp target/${{ matrix.target.target }}/release/minidspd.exe archive
          cd archive/
          compress-archive -Path *.exe -DestinationPath ../minidsp.${{ matrix.target.target }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ matrix.target.target }}-artifact
          path: minidsp.${{ matrix.target.target }}.${{ matrix.target.archive }}
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build_all]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifacts
        run: |
          ls -R artifacts/**/*

      - name: Create release with artifacts
        run: |
          set -x
          assets=()
          for asset in ./artifacts/*/*.{tar.gz,zip,deb}; do
            assets+=("$asset")
          done
          TAG="${GITHUB_REF##*/}"
          gh release create "${assets[@]}" --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
